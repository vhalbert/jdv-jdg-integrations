<project name="jboss-data-virtualization" default="setup-jdg" basedir=".">

	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	<!--loadproperties srcFile="build.properties"-->

	<description>
        This project automates the deployment of all the necessary components 
        to demonstrate external materialization from JBoss Data Virtualization (version: ${jdv.version})
        into JBoss Data Grid (verison: ${jdg.version})
    </description>

	<!-- Set necessary properties -->
	<property name="patches" location="${patches.relative}"/>
	<property name="target" location="${target.relative}/${qs-example}"/>
	<property name="install-configs" location="${install-configs.relative}"/>
	<property name="binaries" location="${binaries.relative}"/>
	<property name="jdg.home" location="${jdg.home.relative}"/>
	<property name="jdv.home" location="${jdv.home.relative}"/>
	<property name="cli" location="${cli.relative}"/>
        <property name="qscli" location="${qs-example}/${cli.relative}"/>
        <property name="qspojo" location="${qs-example}/${pojo.relative}"/>
        <property name="qsteiidfiles" location="${qs-example}/teiidfiles"/>
        <property name="qsvdb" location="${qs-example}/vdb"/>

	<osfamily property="os.family"/>

	<target name="start-jdg-server">
		<echo message="Starting the JBoss JDG ${jdg.version} server in clustered mode"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdg.home}/bin" executable="sh" spawn="true">
					<arg line="clustered.sh -Djboss.socket.binding.port-offset=100"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdg.home}/bin" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c clustered.bat -Djboss.socket.binding.port-offset=100"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>
	
	<target name="start-jdv-server">
		<echo message="Starting the JBoss JDV ${jdv.version} server in standalone mode"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdv.home}/bin" executable="sh" spawn="true">
					<arg line="standalone.sh"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdv.home}/bin" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c standalone.bat"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>
	
	<target name="stop-jdg-server">
		<echo message="Stopping the JDG ${jdg.version} server"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdg.home}/bin" executable="sh" spawn="true">
                                        <arg line="cli.sh -c 127.0.0.1:10099 --file=${cli}/jdg-shutdown.cli"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdg.home}/bin" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c cli.bat -c --controller=127.0.0.1:10099 --file=${cli}\jdg-shutdown.cli"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>
	
	<target name="stop-jdv-server">
		<echo message="Stopping the JDV ${jdv.version} server"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdv.home}/bin" executable="sh" spawn="true">
					<arg line="jboss-cli.sh -c --command=shutdown"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdv.home}/bin" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c jboss-cli.bat -c --command=shutdown"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>

	<target name="clean-jdg">
		<echo message="Cleaning the ${jdg.home}/jdg folder"/>
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${jdg.home}" includes="**/*" />
		</delete>
	</target>

	<target name="unzip-jdg" depends="clean-jdg">
		<echo message="Installing JDG ${jdg.version} to ${jdg.home}"/>
		<unzip src="${binaries}/jboss-datagrid-${jdg.version}-server.zip" dest="${target}/jdg" />
		<chmod perm="ugo+rx">
			<fileset dir="${jdg.home}/bin">
				<include name="**/*.sh"/>
				<include name="**/*.bat"/>
			</fileset>
		</chmod>
	</target>

	<target name="apply-jdg-patch" depends="unzip-jdg,start-jdg-server" unless="skipPatching">
		<echo message="Sleeping for ${jdg.start.sleep} seconds"/>
		<sleep seconds="${jdg.start.sleep}"/>
		<echo message="Patching JBoss JDG ${jdg.version} server in standalone mode"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdg.home}/bin" executable="sh">
					<env key="JBOSS_HOME" value="${jdg.home}"/>
					<arg line="cli.sh -c 127.0.0.1:10099 --file=${cli}/jdg-apply-patch.cli"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdg.home}/bin" executable="cmd">
						<env key="JBOSS_HOME" value="${jdg.home}"/>
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c cli.bat -c 127.0.0.1:10099 --file=${cli}\jdg-apply-patch.cli"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>

	<target name="setup-jdg-caches" depends="apply-jdg-patch" unless="skipPatching">
		<echo message="Sleeping for ${jdg.start.sleep} seconds"/>
		<sleep seconds="${jdg.start.sleep}"/>
		<echo message="Patching JBoss JDG ${jdg.version} server in standalone mode"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdg.home}/bin" executable="sh">
					<env key="JBOSS_HOME" value="${jdg.home}"/>
                                        <arg line="cli.sh -c 127.0.0.1:10099 --file=${qscli}/setup-jdg-caches.cli"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdg.home}/bin" executable="cmd">
						<env key="JBOSS_HOME" value="${jdg.home}"/>
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
                                                <arg line="/c cli.bat -c 127.0.0.1:10099 --file=${qscli}\setup-jdg-caches.cli"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>

    <target name="setup-jdg" depends="setup-jdg-caches, stop-jdg-server"/>

    <target name="clean-jdv">
        <echo message="Cleaning the ${jdv.home} folder"/>
        <echo message="If this fails, manually delete ${jdv.home} folder and rerun"/>
        <delete quiet="true" includeemptydirs="true">
            <fileset dir="${jdv.home}" includes="**/*" />
        </delete>
    </target>

	<target name="install-jdv" depends="clean-jdv">
		<echo message="Installing JDV ${jdv.version} server"/>
		<java jar="${binaries}/jboss-dv-installer-${jdv.installer.version}.jar" fork="true" failonerror="true">
                        <arg value="${install-configs}/dv-${jdv.version}-installation-config.xml"/>
		</java>
	</target>

	<target name="unzip-hotrod-modules" depends="install-jdv">
		<echo message="Unzipping JDG EAP Hotrod modules into JDV"/>
		<unzip src="${binaries}/jboss-datagrid-${jdg.patch.version}-eap-modules-remote-java-client.zip" dest="${jdv.home}" />
		<copy todir="${jdv.home}/modules">
			<fileset dir="${jdv.home}/jboss-datagrid-${jdg.patch.version}-eap-modules-remote-java-client/modules"/>
		</copy>
	</target>

        <target name="apply-jdv-patch" >
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${cli}" executable="sh" spawn="true">
					<arg line="jdv-apply-patch.sh ${patches}/${jdv.patch} ${jdv.home}"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${cli}" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c jdv-apply-patch.bat ${patches}/${jdv.patch} ${jdv.home}"/>
					</exec>
				</then>
			</elseif>
		</if>
        </target>

	<target name="apply-jdv-patchx" unless="skipPatching">
		<echo message="Sleeping for ${jdg.start.sleep} seconds"/>
		<sleep seconds="${jdg.start.sleep}"/>
		<echo message="Patching JBoss JDV ${jdv.version} server in standalone mode"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdv.home}" executable="sh">
					<env key="JBOSS_HOME" value="${jdv.home}"/>
					<arg line="java -jar ${patches}/${jdv.patch} --server ${jdv.home}--update jboss-dv"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdv.home}" executable="cmd">
						<env key="JBOSS_HOME" value="${jdv.home}"/>
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="java -jar ${patches}\${jdv.patch} --server ${jdv.home}--update jboss-dv"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>

	<target name="add-translator-ra" depends="unzip-hotrod-modules, start-jdv-server, apply-jdv-patch">
		<echo message="Sleeping for ${jdg.start.sleep} seconds"/>
		<sleep seconds="${jdg.start.sleep}"/>
		<echo message="Adding infispan translator and resource adapter"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdv.home}/bin" executable="sh">
					<env key="JBOSS_HOME" value="${jdv.home}"/>
					<arg line="jboss-cli.sh -c --file=${cli}/setup-translators-ra.cli"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdv.home}/bin" executable="cmd">
						<env key="JBOSS_HOME" value="${jdv.home}"/>
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c jboss-cli.bat -c --file=${cli}\setup-translators-ra.cli"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>
    
    <target name="setup-jdv" depends="add-translator-ra, stop-jdv-server"/>

    <target name="setup-usecase" depends="install-jdv, copy-data, unzip-pojo, update-module, unzip-hotrod-modules, add-translator-ra, config-ra, stop-jdv-server, deploy-vdbs" >

    </target>


	<target name="unzip-pojo" >
		<echo message="Unzipping Pojo into JDV"/>
		<unzip src="${qspojo}/${pojo.zip}" dest="${jdv.home}" />
		<!--copy todir="${jdv.home}/modules">
			<fileset dir="${jdv.home}/jboss-datagrid-${jdg.patch.version}-eap-modules-remote-java-client/modules"/>
		</copy-->
	</target>
	<target name="config-ra">
		<echo message="Adding JDG resource-adapter"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdv.home}/bin" executable="sh">
					<env key="JBOSS_HOME" value="${jdv.home}"/>
					<arg line="jboss-cli.sh -c --file=${qscli}/create-datasources.cli"/>
				</exec>
				<exec dir="${jdv.home}/bin" executable="sh">
					<env key="JBOSS_HOME" value="${jdv.home}"/>
					<arg line="jboss-cli.sh -c --file=${qscli}/create-jdg-resource-adapter.cli"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdv.home}/bin" executable="cmd">
						<env key="JBOSS_HOME" value="${jdv.home}"/>
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c jboss-cli.bat -c --file=${qscli}\create-datasources.cli"/>
					</exec>
					<exec dir="${jdv.home}/bin" executable="cmd">
						<env key="JBOSS_HOME" value="${jdv.home}"/>
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c jboss-cli.bat -c --file=${qscli}\create-jdg-resource-adapter.cli"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>

        <target name="update-module">
                <echo message="Update infinispan-dsl resource adapter module pojo dependency"/>

                <replace file="${jdv.home}/${module.relative}">
                        <replacetoken>your.pojo.module</replacetoken>
                        <replacevalue>com.client.quickstart.addressbook.pojos</replacevalue>
                </replace>
        </target>

	<target name="copy-data" >
		<echo message="Copying data from ${qsteiidfiles} to JDV server"/>
		<copy todir="${jdv.home}/teiidfiles">
			<fileset dir="${qsteiidfiles}"/>
		</copy>
	</target>

	<target name="deploy-vdbs" >
		<echo message="Deploying VDBs into JDV"/>

                <copy todir="${jdv.home}/standalone/deployments">
                        <fileset dir="${qsvdb}">
                                <include name="**/*.xml"/>
                                <include name="**/*.dodeploy"/>
                        </fileset>
                </copy>
	</target>

</project>
