<project name="jboss-data-virtualization" default="setup-jdg" basedir=".">

	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	<loadproperties srcFile="build.properties" />

	<description>
        This project automates the deployment of all the necessary components 
        to demonstrate external materialization from JBoss Data Virtualization (version: ${jdv.version})
        into JBoss Data Grid (verison: ${jdg.version})
        </description>


        <import file="${qs-example}/usecase-build.xml"/>

	<!-- Set necessary properties -->
	<property name="patches" location="${patches.relative}"/>
	<property name="target" location="${target.relative}/${qs-example}"/>
	<property name="install-configs" location="${install-configs.relative}"/>
	<property name="binaries" location="${binaries.relative}"/>
	<property name="jdg.home" location="${target.relative}/${qs-example}/${jdg.relative.target.loc}"/>
	<property name="jdv.home" location="${target.relative}/${qs-example}/${jdv.relative.target.loc}"/>
	<property name="cli" location="${cli.relative}"/>
        <property name="qsexample" location="${qs-example}"/>
        <property name="qscli" location="${qs-example}/${cli.relative}"/>
        <property name="qspojo" location="${qs-example}/${pojo.relative}"/>
        <property name="qsteiidfiles" location="${qs-example}/teiidfiles"/>
        <property name="qsvdb" location="${qs-example}/vdb"/>

	<osfamily property="os.family"/>
<!-- import usecase build file -->

        <echo message="Use Case ${qs-example}"/>
        <echo message="JDG Home: ${jdg.home}"/>
        <echo message="JDV Home:${jdv.home}"/>

	<target name="start-jdg-server">
		<echo message="Starting the JBoss JDG ${jdg.version} server in clustered mode"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdg.home}/bin" executable="sh" spawn="true">
					<arg line="clustered.sh -Djboss.socket.binding.port-offset=100"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdg.home}/bin" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c clustered.bat -Djboss.socket.binding.port-offset=100"/>
					</exec>
				</then>
			</elseif>
		</if>
		<echo message="Sleeping for ${jdg.start.sleep} seconds"/>
		<sleep seconds="${jdg.start.sleep}"/>

	</target>
	
	<target name="start-jdv-server">
		<echo message="Starting the JBoss JDV ${jdv.version} server in standalone mode"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdv.home}/bin" executable="sh" spawn="true">
					<arg line="standalone.sh"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdv.home}/bin" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c standalone.bat"/>
					</exec>
				</then>
			</elseif>
		</if>
		<echo message="Sleeping for ${jdg.start.sleep} seconds"/>
		<sleep seconds="${jdg.start.sleep}"/>

	</target>
	
	<target name="stop-jdg-server">
		<echo message="Stopping the JDG ${jdg.version} server"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdg.home}/bin" executable="sh" spawn="true">
                                        <arg line="cli.sh -c 127.0.0.1:10099 --file=${cli}/jdg-shutdown.cli"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdg.home}/bin" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c cli.bat -c --controller=127.0.0.1:10099 --file=${cli}\jdg-shutdown.cli"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>
	
	<target name="stop-jdv-server">
		<echo message="Stopping the JDV ${jdv.version} server"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdv.home}/bin" executable="sh" spawn="true">
					<arg line="jboss-cli.sh -c --command=shutdown"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdv.home}/bin" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c jboss-cli.bat -c --command=shutdown"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>


    <target name="setup-jdg" depends="setup-jdg-caches, stop-jdg-server"/>

    <target name="setup-jdv" depends="install-jdv, add-translator-ra, stop-jdv-server"/>


	<target name="clean-jdg" if="is.jdg.exists" depends="test-jdg">
		<echo message="Cleaning the ${jdg.home} folder"/>
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${jdg.home}" includes="**/*" />
		</delete>
	</target>

        <target name="test-jdg">
                <condition property="is.jdg.exists" value="true" >
                        <and>
                        <resourceexists>
                                <file file="${jdg.home}" />
                        </resourceexists>
                        </and>
                </condition>
        </target>

        <target name="jdg-binary-exist">
                <condition property="is.jdgbinary.exists" value="true" >
                        <and>
                        <resourceexists>
                                <file file="${binaries}/jboss-datagrid-${jdg.version}-server.zip" />
                        </resourceexists>
                        </and>
                </condition>
        </target>

	<target name="unzip-jdg" if="is.jdgbinary.exists" depends="jdg-binary-exist">
		<echo message="Installing JDG ${jdg.version} to ${jdg.home}"/>
		<unzip src="${binaries}/jboss-datagrid-${jdg.version}-server.zip" dest="${target}" />
		<chmod perm="ugo+rx">
			<fileset dir="${jdg.home}/bin">
				<include name="**/*.sh"/>
				<include name="**/*.bat"/>
			</fileset>
		</chmod>
	</target>

	<target name="apply-jdg-patch" depends="unzip-jdg,start-jdg-server" unless="skipPatching">
		<echo message="Patching JBoss JDG ${jdg.version} server in standalone mode"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdg.home}/bin" executable="sh">
					<env key="JBOSS_HOME" value="${jdg.home}"/>
					<arg line="cli.sh -c 127.0.0.1:10099 --file=${cli}/jdg-apply-patch.cli"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdg.home}/bin" executable="cmd">
						<env key="JBOSS_HOME" value="${jdg.home}"/>
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c cli.bat -c 127.0.0.1:10099 --file=${cli}\jdg-apply-patch.cli"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>

	<target name="setup-jdg-caches" depends="apply-jdg-patch" unless="skipPatching">
		<echo message="Patching JBoss JDG ${jdg.version} server in standalone mode"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdg.home}/bin" executable="sh">
					<env key="JBOSS_HOME" value="${jdg.home}"/>
                                        <arg line="cli.sh -c 127.0.0.1:10099 --file=${qscli}/setup-jdg-caches.cli"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdg.home}/bin" executable="cmd">
						<env key="JBOSS_HOME" value="${jdg.home}"/>
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
                                                <arg line="/c cli.bat -c 127.0.0.1:10099 --file=${qscli}\setup-jdg-caches.cli"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>


	<target name="install-jdv" depends="clean-jdv, install-jdv-kit, apply-jdv-patch, unzip-hotrod-modules" />

        <target name="clean-jdv" if="is.jdv.exists" depends="test-jdv">
                <echo message="-----------------------------------------------------------"/>
                <echo message=" "/>
                <echo message="Cleaning the ${jdv.home} folder"/>
                <echo message="If this fails, manually delete ${jdv.home} folder and rerun"/>
                <echo message=" "/>
                <echo message="-----------------------------------------------------------"/>
               <delete quiet="true" includeemptydirs="true" >
                        <fileset dir="${jdv.home}" includes="**/*" />
                </delete>

		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdv.home}" executable="sh" spawn="true">
					<arg line="rm -rf ./*"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdv.home}" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c del ${jdv.home}"/>
					</exec>
				</then>
			</elseif>
		</if>
        </target>

       <target name="test-jdv">
                <condition property="is.jdv.exists" value="true" >
                        <and>
                        <resourceexists>
                                <file file="${jdv.home}" />
                        </resourceexists>
                        </and>
                </condition>
        </target>


	<target name="install-jdv-kit">
		<echo message="Installing JDV ${jdv.version} server"/>
 
                <!--need to substitute the intallation location into the config file -->
                <copy file="${install-configs}/dv-${jdv.version}-installation-config.xml" tofile="${target}/dv-${jdv.version}-installation-config.xml" overwrite="true"/>

                <replace file="${target}/dv-${jdv.version}-installation-config.xml" token="{install.path}" value="${jdv.home}"/>
 
		<java jar="${binaries}/jboss-dv-installer-${jdv.installer.version}.jar" fork="true" failonerror="true">
                        <arg value="${target}/dv-${jdv.version}-installation-config.xml"/>
		</java>
	</target>

	<target name="unzip-hotrod-modules">
		<echo message="Unzipping JDG EAP Hotrod modules into JDV"/>
		<unzip src="${binaries}/jboss-datagrid-${jdg.patch.version}-eap-modules-remote-java-client.zip" dest="${jdv.home}" />
		<copy todir="${jdv.home}/modules">
			<fileset dir="${jdv.home}/jboss-datagrid-${jdg.patch.version}-eap-modules-remote-java-client/modules"/>
		</copy>
	</target>

        <target name="apply-jdv-patch" unless="skipPatching">
		<echo message="Patching JBoss JDV ${jdv.version} server in standalone mode with ${patches}/${jdv.patch}"/>

		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${basedir}" executable="sh" >
                                        <env key="JBOSS_HOME" value="${jdv.home}"/>
					<arg line="./jdv-apply-patch.sh ${patches}/${jdv.patch} ${jdv.home}"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${cli}" executable="cmd" spawn="true">
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c jdv-apply-patch.bat ${patches}/${jdv.patch} ${jdv.home}"/>
					</exec>
				</then>
			</elseif>
		</if>
        </target>

	<target name="apply-jdv-patchx"   unless="skipPatching">
		<echo message="Patching JBoss JDV ${jdv.version} server in standalone mode"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdv.home}" executable="sh">
					<env key="JBOSS_HOME" value="${jdv.home}"/>
					<arg line="java -jar ${patches}/${jdv.patch} --server ${jdv.home} --update jboss-dv"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />      
				<then>
					<exec dir="${jdv.home}" executable="cmd">
						<env key="JBOSS_HOME" value="${jdv.home}"/>
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="java -jar ${patches}\${jdv.patch} --server ${jdv.home} --update jboss-dv"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>

	<target name="add-translator-ra" depends="start-jdv-server">
		<echo message="Adding infispan translator and resource adapter"/>
		<if>
			<equals arg1="${os.family}" arg2="unix" />
			<then>
				<exec dir="${jdv.home}/bin" executable="sh">
					<env key="JBOSS_HOME" value="${jdv.home}"/>
					<arg line="jboss-cli.sh -c --file=${jdv.home}/docs/teiid/datasources/infinispan/add-infinispan-cache-dsl-translator.cli"/>
				</exec>
			</then>
			<elseif>
				<equals arg1="${os.family}" arg2="windows" />
				<then>
					<exec dir="${jdv.home}/bin" executable="cmd">
						<env key="JBOSS_HOME" value="${jdv.home}"/>
						<env key="PATH" path="${env.PATH};C:\WINDOWS\system32"/>
						<arg line="/c jboss-cli.bat -c --file=${jdv.home}\docs\teiid\datasources\infinispan\add-infinispan-cache-dsl-translator.cli"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>

        <target name="clone-template">

		<echo message="Cloning template to create usecase ${new-usecase}"/>

		<copy todir="${basedir}/${new-usecase}">
			<fileset dir="${basedir}/usecase_template"/>
		</copy>

                <echo message="-----------------------------------------------------------"/>
                <echo message=" "/>
		<echo message="goto ${basedir}/${new-usecase} to find the cli, pojo and vdb folders for cutomization"/>
                <echo message=" "/>
                <echo message="-----------------------------------------------------------"/>


        </target>
 

</project>
